@startuml
hide empty fields
hide empty methods
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam BackgroundColor #FEFEFE
allowmixing
skinparam packageStyle Frame

class campingplatz.plots.Plot
class campingplatz.reservation.Cart
class campingplatz.reservation.Reservation
interface campingplatz.reservation.ReservationRepository
interface org.salespointframework.catalog.Catalog<T extends Product>
interface org.salespointframework.core.DataInitializer

package campingplatz.seasonalplots {
    package seasonalPlotReservations{
    class SeasonalPlotCart{
    +reservations: List<SeasonalPlotReservation>
    +SeasonalPlotCart()
    +add(SeasonalPlotReservation reservation): boolean
    +getReservationsOfUser(UserAccount user): List<SeasonalPlotReservation>
    +clear(): void
    +remove(SeasonalPlotReservation reservation): boolean
    }
    class SeasonalPlotReservation<<Entity>>{
    -payed_months: int
    -payMethod =  ayMethod.YEARLY: PayMethod
    -electricityDifference = 0.0: Double
    -waterDifference = 0.0: Double
    +SeasonalPlotReservation(UserAccount user, SeasonalPlot product, LocalDateTime begin, LocalDateTime end, PayMethod payMethod)
    +getIntervalUnit(): ChronoUnit
    +getPrice(): MonetaryAmount
    +isNextYearAvaible(LocalDateTime date): boolean
    +setElectricityDifference(Double newElectricityMeter): void
    +setWaterDifference(Double newWaterMeter): void
    +updateMonthlyPayment(LocalDateTime date): void
    }
    enum PayMethod{
    MONTHLY
    YEARLY
    +index: Integer
    +label: String
    +PayMethod(Integer index, String label)
    +{static} fromNumberPayMethod(Integer i): PayMethod
    }
    class SeasonalPlotReservationDashboardController<<Controller>>{
    +plotReservations: SeasonalPlotReservationRepository
    +accountancy: Accountancy
    +seasonalPlotCatalog: SeasonalPlotCatalog
    +businessTime: BusinessTime
    +SeasonalPlotReservationDashboardController(SeasonalPlotReservationRepository plotReservations, BusinessTime businessTime, Accountancy accountancy, SeasonalPlotCatalog plotCatalog)
    +reservations(Model model): String
    +updateReservations(Model model, ReservationChangeInformation info): String
    +dayHasPassed(): void
    }
    interface ReservationChangeInformation {
    +getReservationUUID(): UUID
    +getStateValue(): Integer
    +getNewElectricityMeter(): Double
    +getNewWaterMeter(): Double
    }
    class TimedEventListener{
    +on(DayHasPassed event): void
    +on(MonthHasPassed event): void
    }
    interface SeasonalPlotReservationRepository
    }
    class Config{
    -{static} electricityCosts = 0.29: double
    -{static} waterCosts = 2.59: double
    +{static}getElectricityCosts(): double
    +{static}setElectricityCosts(double electricityCosts): void
    +{static}getWaterCosts(): double
    +{static}setWaterCosts(double waterCosts): void
    }
    class SeasonalPlot<<Entity>>{
    -electricityMeter: double
    -waterMeter: double
    +SeasonalPlot(String name, Double size, Money price, ParkingLot parking, double electricityMeter, double waterMeter, String imagePath, String description)
    +settlementElectricity(double electricityMeter, Double difference): Double
    +settlementWater(double waterMeter, Double difference): Double
    +{static}getArrival(LocalDateTime now): LocalDateTime
    +getDeparture(LocalDateTime now): LocalDateTime
    }
    interface SeasonalPlotCatalog<<Repository>>{
    +seasonalFilter(SeasonalSiteState query): List<SeasonalPlot>
    }
    interface SeasonalSiteState{
    +getSizeMin(): Double
    +getSizeMax(): Double
    +getPriceMax(): Double
    +getPriceMin(): Double
    +getParking(): Integer
    }
    class SeasonalPlotCatalogController<<Controller>> {
    +seasonalPlotCatalog: SeasonalPlotCatalog
    +reservationRepository: SeasonalPlotReservationRepository
    +activReservationRepository: Set<SeasonalPlotReservation>
    +businessTime: BusinessTime
    +SeasonalPlotCatalogController(SeasonalPlotCatalog seasonalPlotCatalog, SeasonalPlotReservationRepository reservationRepository, BusinessTime businessTime)
    +initializeSeasonalCart(): SeasonalPlotCart
    +setupSeasonalCatalog(Model model, Optional<UserAccount> user, SeasonalPlotCatalog.SeasonalSiteState query): String
    +filter(Model model, Optional<UserAccount> user, SeasonalPlotCatalog.SeasonalSiteState query): String
    +reservate(Model model, UserAccount user, SeasonalPlot seasonalPlot, Integer payMethod, SeasonalPlotCart seasonalPlotCart): String
    +cancel(Model model, UserAccount user, SeasonalPlot seasonalPlot): String
    +showSeasonalPlotDetails(Model model, SeasonalPlotCatalog.SeasonalSiteState query, SeasonalPlot plot): String
    +seasonalComment(Model model, SeasonalPlot plot, CommentInfo info, UserAccount currUserAccount): String
    }
    interface CommentInfo {
    +getComment(): String
    +getRating(): int
    }
    class SeasonalPlotCatalogDataInitializer<<Component>>{
    -seasonalPlotCatalog: SeasonalPlotCatalog
    +SeasonalPlotCatalogDataInitializer(SeasonalPlotCatalog seasonalPlotCatalog)
    +initialize(): void
    }
    class SeasonalPlotDashboardController<<Controller>>{
    +seasonalPlotCatalog: SeasonalPlotCatalog
    +accountancy: Accountancy
    +SeasonalPlotDashboardController(SeasonalPlotCatalog plotCatalog, Accountancy accountancy)
    +seasonalPlots(Model model): String
    +changeSeasonalPlotDetails(Model model, SeasonalPlotDashboardController.SeasonalPlotInformation info): String
    +createSeasonalPlot(Model model, SeasonalPlotDashboardController.SeasonalPlotInformation info): String
    +changeCosts(Model model, SeasonalPlotDashboardController.CostsInfo costsInfo): String
    }
    interface SeasonalPlotInformation {
    +getPlotID(): Product.ProductIdentifier
    +getName(): String
    +getSize(): Double
    +getParkingValue(): Integer
    +getElectricityMeter(): Double
    +getWaterMeter(): Double
    +getPrice(): Double
    +getDescription(): String
    +getPicture(): String
    +getState(): Integer
    +getRepairCost(): Double
    }
    interface CostsInfo{
    +getElectricityCosts(): Double
    +getWaterCosts(): Double
    }
}

SeasonalPlot --|> Plot
SeasonalPlotCatalog --|> Catalog:<<bind T->SeasonalPlot>>
SeasonalPlotDashboardController ..> SeasonalPlotCatalog:<<use>>
SeasonalPlotDashboardController ..> Config:<<use>>
SeasonalPlotCatalogController ..> SeasonalPlotCatalog:<<use>>
SeasonalPlotCatalogDataInitializer ..> SeasonalPlotCatalog:<<use>>
SeasonalPlotCatalogDataInitializer ..|> DataInitializer
SeasonalPlotCatalog ..> SeasonalPlot:<<use>>

SeasonalPlotCart --|> Cart:<<bind T->SeasonalPlot, U->SeasonalPlotReservation>>
SeasonalPlotReservation --|> Reservation:<<bind T->SeasonalPlot>>
SeasonalPlotReservationDashboardController ..> SeasonalPlotCatalog:<<use>>
SeasonalPlotReservationRepository -|> ReservationRepository: <<bind T->SeasonalPlot, U->SeasonalPlotReservation>>

SeasonalPlotReservationDashboardController ..> SeasonalPlotReservationRepository:<<use>>

SeasonalPlotReservationRepository ..> SeasonalPlotReservation:<<use>>

PayMethod --+ SeasonalPlotReservation

ReservationChangeInformation --+ SeasonalPlotReservationDashboardController

TimedEventListener --+ SeasonalPlotReservationDashboardController

SeasonalSiteState --+ SeasonalPlotCatalog

CommentInfo --+ SeasonalPlotCatalogController

SeasonalPlotInformation --+ SeasonalPlotDashboardController

CostsInfo --+ SeasonalPlotDashboardController

@enduml