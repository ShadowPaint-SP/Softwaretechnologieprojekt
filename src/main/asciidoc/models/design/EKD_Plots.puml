@startuml
hide empty fields
hide empty methods
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam BackgroundColor #FEFEFE
allowmixing
skinparam packageStyle Frame

class campingplatz.utils.DetailedProduct
interface org.salespointframework.core.DataInitializer
interface org.salespointframework.catalog.Catalog<T extends Product>
interface java.io.Serializable
class campingplatz.customer.CustomerManagement
class java.util.HashMap
interface org.springframework.data.repository.CrudRepository<T, ID>
abstract class campingplatz.reservation.ReservationDiscounter<T extends Product, U extends Reservation<T>>

class campingplatz.reservation.Cart<T extends Product, U extends Reservation<T>>
class campingplatz.reservation.Reservation<T extends Product>

interface campingplatz.reservation.ReservationRepository<T extends Product, U extends Reservation<T>>


package campingplatz.plots {
    class Comment<<Entity>>{
    -id: UUID
    -text: String
    -rating: int
    -time: LocalDateTime
    -firstName: String
    -lastName: String
    +Comment(String text, int rating, LocalDateTime time, String firstName, String lastName)
    +getId(): UUID
    +getText(): String
    +getRating(): int
    +getTime(): LocalDateTime
    +getFirstName(): String
    +getLastName(): String
    }
    class CommentDataInitializer<<Component>>{
    -reservationRepository: PlotReservationRepository
    -customerManagement: CustomerManagement
    -plotCatalog: PlotCatalog
    +CommentDataInitializer(PlotReservationRepository reservationRepository, CustomerManagement customerManagement, PlotCatalog plotCatalog)
    +maxDaysInThePast = 1000: Integer
    +randomTime(): LocalDateTime
    +createComment(String text, Integer rating, Customer customer): Comment
    +initialize(): void
    }
    package plotreservations{
        class PlotCart
        class PlotReservation<<Entity>>{
        +PlotReservation(UserAccount userAccount, Plot plot, LocalDateTime arrival, LocalDateTime departure)
        +getIntervalUnit(): ChronoUnit
        }
        interface PlotReservationRepository
        class PlotReservationDataInitializer<<Component>>{
        -reservationRepository: PlotReservationRepository
        -customerManagement: CustomerManagement
        -plotCatalog: PlotCatalog
        +PlotReservationDataInitializer(PlotReservationRepository reservationRepository, CustomerManagement customerManagement, PlotCatalog plotCatalog)
        +initialize(): void
        }
        class PlotReservationDashboardController<<Controller>>{
        +plotReservations: PlotReservationRepository
        +accountancy: Accountancy
        +PlotReservationDashboardController(PlotReservationRepository plotReservations, Accountancy accountancy)
        +reservations(Model model): String
        +updateReservations(Model model, ReservationChangeInformation info): String
        }
        interface ReservationChangeInformation{
        +getReservationUUID(): UUID
        +getStateValue(): Integer
        }
    }
    package plotdiscounts{
        interface PlotReservationDiscountRepository<<Repository>>{
        +findAll(): List<PlotReservationDiscount>
        +findAllByAmount(Integer amount): List<PlotReservationDiscount>
        }
        class PlotReservationDiscountDataInitilizer<<Component>>{
        -discountRepository: PlotReservationDiscountRepository
        +PlotReservationDiscountDataInitilizer(PlotReservationDiscountRepository discountRepository)
        +initialize(): void
        }
        class PlotReservationDiscount<<Entity>>{
        -id: UUID
        -amount: Integer
        -discount: Double
        +PlotReservationDiscount(Integer amount, Double discount)
        +getDiscountPercent(): Long
        +setDiscountPercent(Integer discountPercent): void
        +setDiscount(double discount): void
        +getId(): UUID
        +getAmount(): Integer
        +setAmount(Integer value): void
        +getDiscount(): Double
        }
        class PlotReservationDiscounter{
        +reservations: List<PlotReservation>
        +discounts: List<PlotReservationDiscount>
        +PlotReservationDiscounter(List<PlotReservation> reservations, List<PlotReservationDiscount> discounts)
        +applyDiscount(PlotReservation reservation): void
        }
        class PlotReservationDiscountDashboardController<<Controller>>{
        -plotReservationDiscounts: PlotReservationDiscountRepository
        +PlotReservationDiscountDashboardController(PlotReservationDiscountRepository plotReservationDiscounts)
        +discount(Model model): String
        +changeDiscount(Model model, DiscountInformation info): String
        +createDiscount(Model model, DiscountInformation info): String
        +deleteDiscount(Model model, DiscountInformation info): String
        }
        interface DiscountInformation{
        +getUUID(): UUID
        +getAmount(): Integer
        +getDiscount(): Integer
        }
        }

    class Plot<<Entity>>{
    -size: Double
    -parking: ParkingLot
    -state = State.OPERATIONAL: State
    -comments: List<Comment>
    +Plot(String name, Double size, Money price, ParkingLot parking, String imagePath, String description)
    +getPriceDouble(): Double
    +getPriceString(): String
    +getSizeString(): String
    +averageRating(): Double
    +addComment(Comment comment): void
    +deleteComment(UUID id): void
    +getSize(): Double
    +setSize(Double value): void
    +getParking(): ParkingLot
    +setParking(ParkingLot value): void
    +getState(): State
    +setState(State value): void
    +getComments(): List<Comment>
    +setComments(List<Comment> value): void
    }
    enum ParkingLot<<enumeration>>{
    NONE
    BIKE_PARKING
    CAR_PARKING
    CAMPER_PARKING
    --
    +size: Integer
    +label: String
    --
    +ParkingLot(size: Integer, label: String)
    +{static} fromNumber(Integer i): ParkingLot
    }
    enum State{
    OPERATIONAL,
    DEFECTIVE,
    HIDDEN
    +index: Integer
    +label: String
    +State(Integer index, String label)
    +{static}fromNumber(Integer i): State
    }
    interface PlotCatalog<<Repository>>{
    +findByState(Plot.State state): List<Plot>
    }
    class PlotCatalogAvailabilityTable{
    +firstDay: LocalDate
    +lastDay: LocalDate
    +length: Integer
    +PlotCatalogAvailabilityTable(LocalDate firstDay, LocalDate lastDay, List<Plot> plots)
    +addReservations(Optional<UserAccount> user, List<Reservation<Plot>> reservations): PlotCatalogAvailabilityTable
    +addHighlights(PlotCatalog.SiteState query, Set<Plot> reservedPlots): PlotCatalogAvailabilityTable
    +addSelections(PlotCart reservationCart): PlotCatalogAvailabilityTable
    +addPastMarkings(LocalDate cutofTime): PlotCatalogAvailabilityTable
    }
    enum FieldType{
    FREE_COMPLETELY
    FREE_HIGHLIGHTED
    FREE_SELECTED
    RESERVED_OTHER
    RESERVED_SELF
    BACK_IN_TIME
    --
    +clickability: String
    +value: Integer
    +color: String
    +label: String
    +highlight: String
    --
    +FieldType(Integer value, String label, String color, Boolean clickability, Boolean highlighted)
    }
    class Field{
    +type: FieldType
    +index: Integer
    +Fields(FieldType type, Integer index, Integer amount)
    +getType(): FieldType
    +setType(FieldType value): void
    +getIndex(): Integer
    +setIndex(Integer value): void
    }
    class PlotCatalogController<<Controller>>{
    +plotCatalog: PlotCatalog
    +reservationRepository: PlotReservationRepository
    +businessTime: BusinessTime
    +PlotCatalogController(PlotCatalog plotCatalog, PlotReservationRepository reservationRepository, BusinessTime businessTime)
    +initializeCart(): PlotCart
    +setupCatalog(Model model, Optional<UserAccount> user, PlotCatalog.SiteState query, PlotCart reservationCart): String
    +filter(Model model, Optional<UserAccount> user, PlotCatalog.SiteState query, PlotCart reservationCart): String
    +nextWeek(Model model, Optional<UserAccount> user, PlotCatalog.SiteState query, PlotCart reservationCart): String
    +prevWeek(Model model, Optional<UserAccount> user, PlotCatalog.SiteState query, PlotCart reservationCart): String
    +addReservationRange(Model model, UserAccount user, PlotCatalog.SiteState query, Plot plot, PlotCart reservationCart): String
    +addReservationDay(Model model, UserAccount user, PlotCatalogController.SiteState query, Plot plot, Integer index, PlotCart reservationCart): String
    +showPlotDetails(Model model, Optional<UserAccount> user, SiteState query, Plot plot): String
    +plotComment(Model model, Plot plot, CommentInfo info, UserAccount currUserAccount): String
    +deleteComment(Plot plot, UUID commentId): String
    +evaluatePlots(List<Plot> plots, SiteState query): List<Pair<Integer, Plot>>
    +filterHits(List<Pair<Integer, Plot>> evalautedPlots): List<Plot>
    +aproximateHits(List<Pair<Integer, Plot>> evalautedPlots): List<Plot>
    }
    interface CommentInfo{
        +getComment(): String
        +getRating(): int
        }
    interface SiteState{
    +getArrival(): LocalDate
    +getDepature(): LocalDate
    }
    class PlotCatalogDataInitializer<<Component>>{
    -plotCatalog PlotCatalog
    +PlotCatalogDataInitializer(PlotCatalog plotCatalog)
    +initialize(): void
    }
    class PlotDashboardController<<Controller>>{
    +plotCatalog: PlotCatalog
    +accountancy: Accountancy
    +PlotDashboardController(PlotCatalog plotCatalog, Accountancy accountancy)
    +plots(Model model): String
    +changePlotDetails(Model model, PlotInformation info): String
    +createPlot(Model model, PlotInformation info): String
    }
    interface PlotInformation{
    +getPlotID(): Product.ProductIdentifier
    +getName(): String
    +getSize(): Double
    +getParkingValue(): Integer
    +getPrice(): Double
    +getDescription(): String
    +getPicture(): String
    +getState(): Integer
    +getRepairCost(): Double
    }
}
Comment ..|> Serializable
CommentDataInitializer ..|> DataInitializer
CommentDataInitializer ..> PlotCatalog:<<use>>
CommentDataInitializer ..> PlotReservationRepository:<<use>>
CommentDataInitializer ..> CustomerManagement:<<use>>

Plot --|> DetailedProduct
ParkingLot --+ Plot
State --+ Plot

PlotCatalog --|> Catalog: <<bind T->Plot>>
SiteState --+ PlotCatalogController
CommentInfo --+ PlotCatalogController

PlotCatalogAvailabilityTable --|> HashMap: <<bind K->Plot, V->ArrayList<PlotCatalogAvailabilityTable.Field>>>

FieldType --+ PlotCatalogAvailabilityTable
Field --+ PlotCatalogAvailabilityTable

PlotCatalogDataInitializer ..|> DataInitializer
PlotReservationDataInitializer ..|> DataInitializer

PlotCart --|> Cart: <<bind T->Plot, U->PlotReservation>>
PlotReservation --|> Reservation: <<bind T->Plot>>
PlotReservationRepository --|> ReservationRepository: <<bind T->Plot, U->PlotReservation>>

PlotCatalogController ..> PlotCatalogAvailabilityTable: <<use>>

PlotInformation --+ PlotDashboardController
PlotDashboardController ..> PlotCatalog: <<use>>
PlotCatalogController ..> PlotCatalog: <<use>>

PlotCatalogDataInitializer ..> PlotCatalog: <<use>>

PlotReservationDataInitializer ..> PlotReservationRepository: <<use>>

ReservationChangeInformation --+ PlotReservationDashboardController

PlotReservationDiscountRepository --|> CrudRepository: <<bind T->PlotReservationDiscount, ID->UUID>>

PlotReservationDiscountDataInitilizer ..|> DataInitializer

PlotReservationDiscounter --|> ReservationDiscounter: <<bind T->Plot, U->PlotReservation>>

DiscountInformation --+ PlotReservationDiscountDashboardController

PlotReservationDiscountDashboardController ..> PlotReservationDiscounter: <<use>>

PlotCatalogController ..> PlotCart: <<use>>

PlotReservationDiscountRepository ..> PlotReservationDiscount: <<use>>

CommentDataInitializer ..> Comment: <<use>>
@enduml