@startuml
hide empty fields
hide empty methods
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam BackgroundColor #FEFEFE
allowmixing
skinparam packageStyle Frame

interface campingplatz.utils.Priced
interface Comparable
interface org.springframework.data.repository.CrudRepository

package campingplatz.reservation{
    abstract class Reservation<T extends Product>{
    +id: UUID
    -discount: double
    -user: UserAccount
    -product: T
    -begin: LocalDateTime
    -end: LocalDateTime
    -state: State
    +Reservation(UserAccount user, T product, LocalDateTime begin, LocalDateTime end)
    +Reservation(Reservation<T> original)
    +setDiscount(double discount): void
    +getPreDiscountPrice(): MonetaryAmount
    +getPrice(): MonetaryAmount
    +hasDiscount(): Boolean
    +{abstract} getIntervalUnit(): ChronoUnit
    +getIntervalAmount(): TemporalAmount
    +duration(): long
    +getId(): UUID
    +getDiscount(): double
    +getUser(): UserAccount
    +setUser(UserAccount value): void
    +getProduct(): T
    +setProduct(T value): void
    +getBegin(): LocalDateTime
    +setBegin(LocalDateTime value): void
    +getEnd(): LocalDateTime
    +setEnd(LocalDateTime value): void
    +getState(): State
    +setState(State value): void
    }
    enum State{
    NOT_TAKEN,
    TAKEN,
    PAYED
    -value: Integer
    +State(Integer value)
    +getValue(): Integer
    +{static} fromNumber(Integer i): State
    }
    class ReservationController <<Controller>>{
    -plotReservationRepository: PlotReservationRepository
    -sportItemReservationRepository: SportItemReservationRepository
    -seasonalPlotReservationRepository: SeasonalPlotReservationRepository
    -plotReservationDiscountRepository: PlotReservationDiscountRepository
    +ReservationController(PlotReservationRepository plotReservationRepository,	SportItemReservationRepository sportItemReservationRepository, SeasonalPlotReservationRepository seasonalPlotReservationRepository, PlotReservationDiscountRepository plotReservationDiscountRepository)
    +initializeCart(): PlotCart
    +initializeSportCart(): SportItemCart
    +initializeSeasonalCart(): SeasonalPlotCart
    +cart(Model model, UserAccount userAccount, PlotCart reservationCart, SeasonalPlotCart seasonalPlotCart, SportItemCart sportItemCart): String
    +removeCartItem(Model model, UserAccount userAccount, int index String type, PlotCart reservationCart, SeasonalPlotCart seasonalPlotCart, SportItemCart sportItemCart): String
    +reservate(Model model, UserAccount userAccount, PlotCart reservationCart, SeasonalPlotCart seasonPlotCart, SportItemCart sportItemCart): String
    +orders(Model model, UserAccount user): String
    +periodicallyDeleteReservatinos(): void
    +validatePlotReservations(List<PlotReservation> input): List<PlotReservation>
    +validateSportItemReservations(List<SportItemReservation> input): List<SportItemReservation>
    }
    abstract class ReservationDiscounter<T extends Product, U extends Reservation<T>>{
    +{abstract} applyDiscount(U reservation): void
    +applyDiscountToAll(List<U> reservations): void
    }

    interface ReservationRepository<T extends Product, U extends Reservation<T>><<NoRepositoryBean>>{
    +findAll(): List<U>
    +findByUserId(UserAccount.UserAccountIdentifier id): List<U>
    +findPlotsAll(): Set<T>
    +findReservationsBetween(LocalDateTime arrival, LocalDateTime departure): List<U>
    +findPlotsReservedBetween(LocalDateTime arrival, LocalDateTime departure): Set<T>
    +productIsReservedIn(T product, LocalDateTime arrival, LocalDateTime departure): Boolean
    +findUsersOfProduct(T product): Set<UserAccount>
    +deleteBeforeThan(LocalDateTime time): void
    }
    abstract class Cart<T extends Product, U extends Reservation<T>>{
    +user: UserAccount
    +reservationType: Class<U>
    +Cart(Class<U > reservationType)
    +addEntry(T product, LocalDateTime time): void
    +removeEntry(T product, LocalDateTime time): void
    +containsEntry(T product, LocalDateTime time): boolean
    +getReservations(UserAccount user): ListOfPriced<U>
    +getReservationOfUser(UserAccount user): List<U>
    +add(U reservation): boolean
    +remove(U reservation): boolean
    +contains(U reservation): boolean
    }
    class ReservationEntry{
    -product: T
    -time: LocalDateTime
    +ReservationEntry(T product, LocalDateTime time)
    +compareTo(ReservationEntry second): int
    +getProduct(): T
    +setProduct(T value): void
    +getTime(): LocalDateTime
    +setTime(LocalDateTime value): void
    }
}
Cart --|> java.util.TreeSet: <bind T->Cart<T, U>.ReservationEntry>
ReservationEntry ..|> Comparable: <bind T->Cart<T, U>.ReservationEntry>
ReservationEntry --+ Cart

Reservation ..|> campingplatz.utils.Priced
State --+ Reservation

ReservationRepository --|> CrudRepository:<bind T->U, ID->UUID>

ReservationDiscounter -[hidden]d- ReservationController
ReservationController -[hidden]d- State

@enduml