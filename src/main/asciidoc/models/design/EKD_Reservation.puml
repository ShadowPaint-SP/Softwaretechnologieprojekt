@startuml
hide empty fields
hide empty methods
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam BackgroundColor #FEFEFE
allowmixing
skinparam packageStyle Frame

interface campingplatz.utils.Priced
interface Comparable

package campingplatz.reservation{
    abstract class Reservation<T extends Product>{
    +id: UUID
    -discount: double
    -user: UserAccount
    -product: T
    -begin: LocalDateTime
    -end: LocalDateTime
    -state: State
    +Reservation(UserAccount user, T product, LocalDateTime begin, LocalDateTime end)
    +Reservation(Reservation<T> original)
    +setDiscount(double discount): void
    +getPreDiscountPrice(): MonetaryAmount
    +getPrice(): MonetaryAmount
    +hasDiscount(): Boolean
    +{abstract} getIntervalUnit(): ChronoUnit
    +getIntervalAmount(): TemporalAmount
    +duration(): long
    +getId(): UUID
    +getDiscount(): double
    +getUser(): UserAccount
    +setUser(UserAccount value): void
    +getProduct(): T
    +setProduct(T value): void
    +getBegin(): LocalDateTime
    +setBegin(LocalDateTime value): void
    +getEnd(): LocalDateTime
    +setEnd(LocalDateTime value): void
    +getState(): State
    +setState(State value): void
    }
    enum State{
    NOT_TAKEN,
    TAKEN,
    PAYED
    -value: Integer
    +State(Integer value)
    +getValue(): Integer
    +{static} fromNumber(Integer i): State
    }
    class ReservationController{
    -reservationRepository: ReservationRepository<Plot>
    +initializeCart(): Cart<Plot>
    +cart(Model model, UserAccount userAccount, Cart<Plot> reservationCart): String
    +reservate(Model model, UserAccount userAccount, Cart<Plot> reservationCart): String
    +orders(Model model, UserAccount user): String
    }
    class ReservationDataInitializer{
    -reservationRepository: ReservationRepository<Plot>
    -customerManagement: CustomerManagement
    -plotCatalog: PlotCatalog
    +ReservationDataInitializer(ReservationRepository<Plot> reservationRepository, CustomerManagement customerManagement, PlotCatalog plotCatalog)
    +initialize(): void
    }
    interface ReservationRepository<U extends Product>{
    +findAll(): List<Reservation<U>>
    +findByUserId(UserAccount.UserAccountIdentifier id): List<Reservation<U>>
    +findReservationsBetween(LocalDateTime arrival, LocalDateTime departure): List<Reservation<U>>
    +findPlotsReservedBetween(LocalDateTime arrival, LocalDateTime departure): Set<U>
    +productIsReservedIn(U product, LocalDateTime arrival, LocalDateTime departure): Boolean
    +productIsAvailableIn(U product, LocalDateTime arrival, LocalDateTime departure): Boolean
    }
    class SportItemReservation{
    +SportItemReservation(UserAccount userAccount, SportItem sportItem, LocalDateTime arrival, LocalDateTime departure)
    +getIntervalUnit(): ChronoUnit
    }
    abstract class Cart<T extends Product, U extends Reservation<T>>{
    +user: UserAccount
    +reservationType: Class<U>
    +Cart(Class<U > reservationType)
    +addEntry(T product, LocalDateTime time): void
    +removeEntry(T product, LocalDateTime time): void
    +containsEntry(T product, LocalDateTime time): boolean
    +getReservations(UserAccount user): ListOfPriced<U>
    +getReservationOfUser(UserAccount user): List<U>
    +add(U reservation): boolean
    +remove(U reservation): boolean
    +contains(U reservation): boolean
    }
    class ReservationEntry{
    -product: T
    -time: LocalDateTime
    +ReservationEntry(T product, LocalDateTime time)
    +compareTo(ReservationEntry second): int
    +getProduct(): T
    +setProduct(T value): void
    +getTime(): LocalDateTime
    +setTime(LocalDateTime value): void
    }
}
Cart --|> java.util.TreeSet: <bind T->Cart<T, U>.ReservationEntry>
ReservationEntry ..|> Comparable: <bind T->Cart<T, U>.ReservationEntry>
ReservationEntry --+ Cart

Reservation ..|> campingplatz.utils.Priced
State --+ Reservation

@enduml