Klassen (die evtl in UML überführt werden müssen)(teilweise mit Use case anmerkungen)::


Stellplätze (vorläufig Plots):

Einteilung in Stell- und Lagerplätze laut Text 
  -> Enum PlotType?
  -> Subclasse von Plot?
Verfügen über eine "Dimension" also evtl Breite x Tiefe (x evtl auch Höhe) 
Auch eine Fläche bzw. für Lagerplätze auch m³ ist für "Dimension" denkbar
"Dimension" wenn es einfach bleibt in Stellplatz integrieren oder auslagern als eigene Klasse
hat evtl Parkplätze ( siehe Parkplätze)
hat einen Zustand (frei, besetzt, reserviert, ausfallend)
  Zustandsobject hat Verweis zum Kunden, wenn besetzt
  Zustandsobject hat Ausfallobjekt in dem genauere Beschreibungen und Kosten, wenn ausfallend
hat ein Preis? 
aktuelle kosten des Kunden? oder wird im Stellplatzmanagment verwaltet


Parkplätze ( vorläufig Attachment):

An den Stelllätzen ist "direkt" ein Parkplatz -> nachfragen ob ein Stellplatz auch mehrere Parkplätze haben kann 
die Parkplätze müssen die Typen Auto, Motorrad und Camper enthalten (Enum - AttachmentType)


Stellplatzmanagment (PlotManagment?):

beinhaltet alle Stellplätze
liefert über eine Fassade Informationen ans Dashboard
muss reservierungen entgegennehmen und bei ablauffrist reservierungen löschen
  kann bei reservierungen ein bestimmter Zeitraum angegeben werden? timeline managment?
mitarbeiter weisen kunden Stellplätze zu bzw. bestätigen diese Zuweisung
muss bei fehlgeschlagener Suche alternativen anbieten


User:

kann Accounts anlegen die eine Rolle haben


Kunden (Costumer) ist User:

Kundendaten besonders Bezahlmethoden
kann im System stellplätze suchen und reservieren 


Mitarbeiter (Employee) ist User:

weist final Kunden Stellplätze zu laut Text
kann schnell und einfach Preise Anpassen

Admin/Boss ist Mitarbeiter:

besondere Mitarbeiter mit mehr rechten
z.B. neue Stellplätz hinzufügen entfernen sperren ect.


Sportgeräte:

Typ? 
gemanagt von salespointframework


Dashboard:

Infos anzeigen 
Einnahmen, Auslastung, defekte Stellplätze, Geräte 
weiteres...


Einige Stichpunkte haben nicht direkt etwas mit den Klassen zutun sondern sind eher "Use-cases" die mit den Klassen zutun haben
