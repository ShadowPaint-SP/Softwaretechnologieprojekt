package campingplatz.reservation;

import campingplatz.plots.Plot;

import org.salespointframework.useraccount.UserAccount;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;

import java.time.LocalDate;
import java.util.List;
import java.util.Set;

public interface ReservationRepository extends CrudRepository<Reservation, Long> {

	/**
	 * Redeclare this function to make it apparent it exists
	 * Implementation auto generated by Java Spring
	 */
	@Override
	List<Reservation> findAll();


    /**
     * Returns a List of Reservations with a given UserId.
	 * Implementation auto generated by Java Spring
     */
    List<Reservation> findByUserId(UserAccount.UserAccountIdentifier id);



    /**
     * Database query to return a List of reservations, that are
     * wholy or partially reserved in the given time interval
     *
     */
    @Query("""
                select r from Reservation r
                where (r.arrival >= :arrival and r.arrival < :departure)
                or (r.departure >= :arrival and r.departure < :departure)
                or (r.arrival < :arrival and r.departure > :departure)
            """)
    List<Reservation> findReservationsBetween(LocalDate arrival, LocalDate departure);

    /**
     * Database query to return a Stream of productIds corresponding to plots, that
     * are wholy or partially reserved in the given time interval
     *
     */
    @Query("""
                select distinct r.plot from Reservation r
                where (r.arrival > :arrival and r.arrival <= :departure)
                or (r.departure > :arrival and r.departure <= :departure)
                or (r.arrival <= :arrival and r.departure >= :departure)
            """)
    Set<Plot> findPlotsReservedBetween(LocalDate arrival, LocalDate departure);

    default Boolean plotIsReservedIn(Plot plot, LocalDate arrival, LocalDate departure) {
        return findPlotsReservedBetween(arrival, departure).contains(plot);
    }

    default Boolean plotIsAvailableIn(Plot plot, LocalDate arrival, LocalDate departure) {
        return !findPlotsReservedBetween(arrival, departure).contains(plot);
    }
}