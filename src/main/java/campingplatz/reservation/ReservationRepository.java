package campingplatz.reservation;

import org.salespointframework.catalog.Product;
import org.salespointframework.useraccount.UserAccount;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;

import java.time.LocalDate;
import java.util.List;
import java.util.Set;
import java.util.UUID;

public interface ReservationRepository<T extends Reservable> extends CrudRepository<Reservation<T>, UUID> {

    /**
     * Redeclare this function to make it apparent it exists
     * Implementation auto generated by Java Spring
     */
    @Override
    List<Reservation<T>> findAll();

    /**
     * Returns a List of Reservations with a given UserId.
     * Implementation auto generated by Java Spring
     */
    List<Reservation<T>> findByUserId(UserAccount.UserAccountIdentifier id);

    /**
     * Database query to return a List of reservations, that are
     * wholy or partially reserved in the given time interval
     *
     */
    @Query("""
                select r from Reservation r
                where (r.begin >= :arrival and r.begin < :departure)
                or (r.end >= :arrival and r.end < :departure)
                or (r.begin < :arrival and r.end > :departure)
            """)
    List<Reservation<T>> findReservationsBetween(LocalDate arrival, LocalDate departure);

    /**
     * Database query to return a Stream of productIds corresponding to plots, that
     * are wholy or partially reserved in the given time interval
     *
     */
    @Query("""
                select distinct r.product from Reservation r
                where (r.begin > :arrival and r.begin <= :departure)
                or (r.end > :arrival and r.end <= :departure)
                or (r.begin <= :arrival and r.end >= :departure)
            """)
    Set<T> findPlotsReservedBetween(LocalDate arrival, LocalDate departure);

    default Boolean productIsReservedIn(T product, LocalDate arrival, LocalDate departure) {
        return findPlotsReservedBetween(arrival, departure).contains(product);
    }

    default Boolean productIsAvailableIn(T product, LocalDate arrival, LocalDate departure) {
        return !findPlotsReservedBetween(arrival, departure).contains(product);
    }
}